{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ekaratnida/Applied-machine-learning/blob/master/Week11-neural-network/nn-inclass.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "\"\"\"Improved Neural Network for XNOR\"\"\"\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def sigmoid(z):\n",
        "    \"\"\"Numerically stable sigmoid function\"\"\"\n",
        "    z = np.clip(z, -500, 500)  # Prevent overflow\n",
        "    return 1 / (1 + np.exp(-z))\n",
        "\n",
        "def sigmoid_derivative(z):\n",
        "    \"\"\"Derivative of sigmoid function\"\"\"\n",
        "    s = sigmoid(z)\n",
        "    return s * (1 - s)\n",
        "\n",
        "class NeuralNetwork:\n",
        "    def __init__(self, X, y, hidden_size=2, seed=42):\n",
        "        \"\"\"Initialize neural network with bias terms\"\"\"\n",
        "        np.random.seed(seed)  # For reproducibility\n",
        "        self.X = np.c_[np.ones((X.shape[0], 1)), X]  # Add bias to inputs\n",
        "        self.y = y.reshape(-1, 1)  # Ensure y is column vector\n",
        "        self.n_samples = X.shape[0]\n",
        "\n",
        "        # Xavier initialization for better convergence\n",
        "        self.w1 = np.random.randn(hidden_size, 3) * np.sqrt(1/3)  # 2 hidden + bias input\n",
        "        self.w2 = np.random.randn(1, hidden_size + 1) * np.sqrt(1/(hidden_size + 1))  # 1 output\n",
        "\n",
        "        print(f\"w1 shape: {self.w1.shape}\")\n",
        "        print(f\"w2 shape: {self.w2.shape}\")\n",
        "\n",
        "    def feedforward(self, x):\n",
        "        \"\"\"Forward propagation\"\"\"\n",
        "        self.a1 = x  # Input layer with bias\n",
        "        self.z2 = self.w1 @ self.a1\n",
        "        self.a2 = sigmoid(self.z2)\n",
        "        self.a2 = np.vstack(([1], self.a2))  # Add bias for next layer\n",
        "        self.z3 = self.w2 @ self.a2\n",
        "        self.a3 = sigmoid(self.z3)\n",
        "        return self.a3\n",
        "\n",
        "    def backprop(self):\n",
        "        \"\"\"Backward propagation using cross-entropy loss\"\"\"\n",
        "        self.predictions = np.zeros((self.n_samples, 1))\n",
        "        self.D1 = np.zeros(self.w1.shape)\n",
        "        self.D2 = np.zeros(self.w2.shape)\n",
        "\n",
        "        for i in range(self.n_samples):\n",
        "            x = self.X[i].reshape(-1, 1)\n",
        "            self.feedforward(x)\n",
        "            self.predictions[i] = self.a3\n",
        "\n",
        "            # Error terms (derivative of cross-entropy w.r.t. output)\n",
        "            delta3 = self.a3 - self.y[i]\n",
        "            delta2 = (self.w2.T @ delta3) * np.vstack(([0], sigmoid_derivative(self.z2)))\n",
        "            delta2 = delta2[1:]  # Remove bias term\n",
        "\n",
        "            # Gradients\n",
        "            self.D2 += delta3 @ self.a2.T\n",
        "            self.D1 += delta2 @ self.a1.T\n",
        "\n",
        "        self.D1 /= self.n_samples\n",
        "        self.D2 /= self.n_samples\n",
        "\n",
        "    def train(self, alpha=0.1, epochs=10000, tol=1e-4):\n",
        "        \"\"\"Train with adaptive learning rate and early stopping\"\"\"\n",
        "        for epoch in range(epochs):\n",
        "            old_w1, old_w2 = self.w1.copy(), self.w2.copy()\n",
        "            self.backprop()\n",
        "\n",
        "            # Update weights\n",
        "            self.w1 -= alpha * self.D1\n",
        "            self.w2 -= alpha * self.D2\n",
        "\n",
        "            # Check convergence\n",
        "            if (np.all(np.abs(self.w1 - old_w1) < tol) and\n",
        "                np.all(np.abs(self.w2 - old_w2) < tol)):\n",
        "                print(f\"Converged at epoch {epoch}\")\n",
        "                break\n",
        "\n",
        "    def predict_proba(self, X):\n",
        "        \"\"\"Predict probabilities\"\"\"\n",
        "        X = np.c_[np.ones((X.shape[0], 1)), X]\n",
        "        probs = np.zeros((X.shape[0], 1))\n",
        "        for i in range(X.shape[0]):\n",
        "            probs[i] = self.feedforward(X[i].reshape(-1, 1))\n",
        "        return probs\n",
        "\n",
        "# XNOR data\n",
        "X = np.array([[0,0], [0,1], [1,0], [1,1]])\n",
        "y = np.array([1, 0, 0, 1])  # Correct XNOR outputs\n",
        "\n",
        "# Train network\n",
        "nn = NeuralNetwork(X, y)\n",
        "nn.train(alpha=0.5, epochs=10000)\n",
        "\n",
        "print(\"Training complete\")\n",
        "print(f\"w1:\\n{nn.w1}\")\n",
        "print(f\"w2:\\n{nn.w2}\")\n",
        "print(f\"Predictions:\\n{nn.predict_proba(X)}\")\n",
        "\n",
        "# Visualization\n",
        "xx, yy = np.mgrid[-0.1:1.1:0.1, -0.1:1.1:0.1]\n",
        "grid = np.c_[xx.ravel(), yy.ravel()]\n",
        "probs = nn.predict_proba(grid).reshape(xx.shape)\n",
        "\n",
        "plt.figure(figsize=(12, 10))\n",
        "contour = plt.contourf(xx, yy, probs, 25, cmap=\"RdBu\", vmin=0, vmax=1)\n",
        "plt.colorbar(contour, label=\"$P(y = 1 | X)$\", ticks=[0, 0.25, 0.5, 0.75, 1])\n",
        "plt.scatter(X[:,0], X[:,1], c=y, s=150, cmap=\"RdBu\", edgecolor=\"white\", linewidth=1)\n",
        "plt.title(\"x₁ XNOR x₂\")\n",
        "plt.xlabel(\"x₁\")\n",
        "plt.ylabel(\"x₂\")\n",
        "plt.axis(\"equal\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fa0FMDCSIrln",
        "outputId": "8227a7f9-0878-456b-d55c-3809abc0dfc8"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "w1 shape: (2, 3)\n",
            "w2 shape: (1, 3)\n",
            "Training complete\n",
            "w1:\n",
            "[[ 2.98250309 -6.9985745  -6.99548949]\n",
            " [ 9.46446139 -6.33487146 -6.33400085]]\n",
            "w2:\n",
            "[[  6.25498177  13.79693837 -13.19841473]]\n",
            "Predictions:\n",
            "[[0.99795274]\n",
            " [0.00213782]\n",
            " [0.00213722]\n",
            " [0.99679704]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "nn-inclass.ipnyb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}