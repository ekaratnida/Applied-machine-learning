{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ekaratnida/Applied-machine-learning/blob/master/Week11-neural-network/nn-inclass.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Credit https://joelpendleton.github.io/XNOR-NeuralNet/\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "TTlbnv_HcmD4"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid(z):\n",
        "  return 1 / (1 + np.exp(-z))"
      ],
      "metadata": {
        "id": "quvmLuE9cpks"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid_derivative(z):\n",
        "  sig = sigmoid(z)\n",
        "  return sig * (1 - sig)"
      ],
      "metadata": {
        "id": "NktozpUlE3n3"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "_cell_guid": "9bf7a553-3a65-40b6-bfee-adf55b25b703",
        "_uuid": "931336d1-e65f-4a59-8231-4ed1eee589d1",
        "id": "7O-8qaoFccBu"
      },
      "outputs": [],
      "source": [
        "class NeuralNetwork:\n",
        "\n",
        "    def __init__(self, X, y):\n",
        "        self.X = np.c_[np.ones((X.shape[0], 1)), X] #Training inputs add bias x\n",
        "        self.y = y # Training outputs\n",
        "        self.numberOfExamples = y.shape[0]  # Number of training examples\n",
        "\n",
        "        self.w_1 = (np.random.randn(2, 3)-1)/2  # Initialise weight matrix for layer\n",
        "        #self.w_1 = np.ones((2,3))\n",
        "        #self.w_1 = np.array([[0.1, 0.1,0.1], [0.1, 0.1, 0.1]])\n",
        "        print(self.w_1, \" shape = \",(self.w_1).shape)\n",
        "\n",
        "        self.w_2 = (np.random.randn(1, 3)-1)/2  # Initialise weight matrix for layer 2\n",
        "        #self.w_2 = np.ones((1,3))\n",
        "        #self.w_2 = np.array([[0.1, 0.1, 0.1]])\n",
        "        print(self.w_2, \" shape = \",(self.w_2).shape)\n",
        "        # Error in each layer\n",
        "        self.delta2 = np.zeros((2,1))\n",
        "        self.delta3 = np.zeros((3,1))\n",
        "\n",
        "        self.predictions = np.zeros((4,1))\n",
        "\n",
        "        # There is 2 input units in layer 1 and 2, and 1 output unit, excluding bias units.\n",
        "\n",
        "    def feedforward(self, x):\n",
        "\n",
        "        self.a_1 = x  # vector training example (layer 1 input)\n",
        "        #print(\"a1\", self.a_1)\n",
        "\n",
        "        self.z_2 = self.w_1 @ self.a_1\n",
        "        #print(\"z2\", self.z_2)\n",
        "\n",
        "        self.a_2 = sigmoid(self.z_2)\n",
        "        #print(\"a2\", self.a_2, \"shape = \",self.a_2.shape)\n",
        "\n",
        "        self.a_2 = np.vstack(([1], self.a_2))  # Add bias unit to a_2 for next layer computation\n",
        "        #print(\"a2\", self.a_2)\n",
        "\n",
        "        self.z_3 = self.w_2 @ self.a_2\n",
        "        #print(\"z3\", self.z_3)\n",
        "\n",
        "        self.a_3 = sigmoid(self.z_3) # Output\n",
        "        #print(\"a3\", self.a_3)\n",
        "\n",
        "        return self.a_3\n",
        "\n",
        "    def backprop(self):\n",
        "\n",
        "        # These are temporary variables used to compute self.D_1 and self.D_2\n",
        "\n",
        "        self.d_1 =  np.zeros(self.w_1.shape)\n",
        "        self.d_2 = np.zeros(self.w_2.shape)\n",
        "\n",
        "        # These layers store the derivate of the cost with respect to the weights in each layer\n",
        "        self.D_1 = np.zeros(self.w_1.shape)\n",
        "        self.D_2 = np.zeros(self.w_2.shape)\n",
        "\n",
        "        for i in range(0,self.numberOfExamples):\n",
        "\n",
        "          self.a_3 = self.feedforward(np.reshape(self.X[i, :], ((-1,1))))\n",
        "\n",
        "          self.predictions[i,0] = self.a_3\n",
        "\n",
        "          #self.delta3 = 0.5 * np.power(self.a_3 - y[i],2)\n",
        "          self.delta3 = self.a_3 - y[i] #Calculate 'error' in layer 3\n",
        "          #print(\"delta3 = \",self.delta3, \" shape = \",self.delta3.shape)\n",
        "\n",
        "          ss = np.vstack(([0],sigmoid_derivative(self.z_2)))\n",
        "\n",
        "          self.delta2 = (self.w_2.T @ self.delta3) * ss #Calculate 'error' in layer 2\n",
        "          #print(\"w_2.T \",self.w_2.T,\" shape = \",(self.w_2.T).shape)\n",
        "          #print(\"ss \",ss)\n",
        "\n",
        "          '''We want the error for only 2 units, not for the bias unit.\n",
        "          However, in order to use the vectorised implementation we need the sigmoid derivative to be a 3 dimensional vector, so I added 0 as an element to the derivative.\n",
        "          This has no effect on the element-wise multiplication.'''\n",
        "\n",
        "          self.delta2 = np.delete(self.delta2, 0)  # Remove error associated to +1 bias unit as it has no error / output\n",
        "\n",
        "          self.delta2 = np.reshape(self.delta2, (-1, 1))\n",
        "          #print(\"delta2 = \",self.delta2)\n",
        "\n",
        "          # Adjust the temporary variables used to compute gradient of J\n",
        "          self.d_2 += self.delta3 @ (self.a_2.T)\n",
        "          #print(\"d2 = \",self.d_2)\n",
        "\n",
        "          self.d_1 += self.delta2 @ (self.a_1.T)\n",
        "          #print(\"d1 = \",self.d_1)\n",
        "\n",
        "        #print(\"finish one batch\")\n",
        "        # Partial derivatives of cost function\n",
        "        self.D_2 = (1/self.numberOfExamples) * self.d_2\n",
        "\n",
        "        self.D_1 = (1/self.numberOfExamples) * self.d_1\n",
        "\n",
        "    def probs(self, X): #Function to generate the probabilites based on matrix of inputs\n",
        "\n",
        "        probabilities = np.zeros((X.shape[0], 1))\n",
        "        for i in range(0, X.shape[0]):\n",
        "            test = np.reshape(X[i,:], (-1,1))\n",
        "            test = np.vstack(([1], test))\n",
        "            probabilities[i, 0] = self.feedforward(test)\n",
        "        return probabilities"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = np.array([[0,0],\n",
        "             [0,1],\n",
        "             [1,0],\n",
        "             [1,1]])\n",
        "\n",
        "y = np.array([[1],\n",
        "      [0],\n",
        "      [0],\n",
        "      [1]])\n",
        "\n",
        "\n",
        "# Neural network object\n",
        "nn = NeuralNetwork(X,y)\n",
        "\n",
        "alpha = 1  # Learning Rate\n",
        "epoch = 10000\n",
        "\n",
        "for i in range(0, epoch): #Perform gradient descent\n",
        "  nn.backprop()\n",
        "\n",
        "  # Update weights\n",
        "  nn.w_1 += - alpha * nn.D_1\n",
        "  nn.w_2 += - alpha * nn.D_2\n",
        "\n",
        "  nn.D_1.fill(0)\n",
        "  nn.D_2.fill(0)\n",
        "\n",
        "print(\"Finish training\")\n",
        "print(\"Weight results\")\n",
        "print(\"w_1\", nn.w_1)\n",
        "print(\"w_2\", nn.w_2)\n",
        "\n",
        "#Graph\n",
        "xx, yy = np.mgrid[-0.1:1.1:0.1, -0.1:1.1:0.1]\n",
        "\n",
        "grid = np.c_[xx.ravel(), yy.ravel()]\n",
        "\n",
        "# Find the probabilities for each combination of features\n",
        "\n",
        "probs = nn.probs(grid).reshape(xx.shape)\n",
        "\n",
        "f, ax = plt.subplots(figsize=(12, 10))\n",
        "\n",
        "# Create contour lines for each set of probabilities\n",
        "\n",
        "contour = ax.contourf(xx, yy, probs, 25, cmap=\"RdBu\", vmin=0, vmax=1)\n",
        "\n",
        "plt.title(\"XNOR Neural Network Decision Boundary\")\n",
        "ax_c = f.colorbar(contour)\n",
        "ax_c.set_label(\"$P(y = 1 | X)$\")\n",
        "ax_c.set_ticks([0, .25, .5, .75, 1])\n",
        "\n",
        "# Plot training examples on figure\n",
        "\n",
        "ax.scatter(X[:,0], X[:, 1], c=y[:,0], s=150,\n",
        "           cmap=\"RdBu\", vmin=-.2, vmax=1.2,\n",
        "           edgecolor=\"white\", linewidth=1)\n",
        "\n",
        "ax.set(aspect=\"equal\",\n",
        "       xlabel=\"x$_1$\", ylabel=\"x$_2$\")\n",
        "\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "a5Z_ZCpuc2A_",
        "outputId": "631bdc3f-4359-493f-cf22-d97e09e4f296"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-0.84952775  0.52702494 -0.09445699]\n",
            " [-0.85550466 -1.84796977  0.73135578]]  shape =  (2, 3)\n",
            "[[-1.47065193 -0.18593586 -1.19737829]]  shape =  (1, 3)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-3645848e68c8>:62: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  self.predictions[i,0] = self.a_3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Finish training\n",
            "Weight results\n",
            "w_1 [[ 3.65072593 -7.35582752  7.66942509]\n",
            " [-4.16204504 -7.96146941  7.84290993]]\n",
            "w_2 [[ -7.00758321  14.59417958 -15.01120616]]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-4-3645848e68c8>:102: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  probabilities[i, 0] = self.feedforward(test)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "NN in SKLearn"
      ],
      "metadata": {
        "id": "nFU5BEpl3-3s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.model_selection import train_test_split\n",
        "X, y = make_classification(n_samples=100, random_state=1)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y,random_state=1)\n",
        "clf = MLPClassifier(random_state=1, max_iter=300).fit(X_train, y_train)\n",
        "\n",
        "print(clf.predict_proba(X_test[:1]))\n",
        "\n",
        "print(clf.predict(X_test[:5, :]))\n",
        "\n",
        "print(clf.score(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eNRYrDzs4Cee",
        "outputId": "f93a1aef-4098-44aa-b8dd-6da7a5ef0447"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.03838405 0.96161595]]\n",
            "[1 0 1 0 1]\n",
            "0.88\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "nn-inclass.ipnyb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}